{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ThemeColors, ThemeContext, SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\nimport DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n    _this.drawerGestureRef = React.createRef();\n    _this._handleDrawerStateChange = function (newState, willShow) {\n      if (newState === 'Idle') {\n        if (!_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_IDLE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      } else if (newState === 'Settling') {\n        _this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_SETTLING,\n          key: _this.props.navigation.state.key,\n          willShow: willShow\n        });\n      } else {\n        if (_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_ACTIVE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      }\n    };\n    _this._handleDrawerOpen = function () {\n      _this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_OPENED,\n        key: _this.props.navigation.state.key\n      });\n    };\n    _this._handleDrawerClose = function () {\n      _this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_CLOSED,\n        key: _this.props.navigation.state.key\n      });\n    };\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n    _this._renderNavigationView = function (drawerOpenProgress) {\n      return _jsx(DrawerGestureContext.Provider, {\n        value: _this.drawerGestureRef,\n        children: _jsx(DrawerSidebar, _objectSpread({\n          screenProps: _this.props.screenProps,\n          drawerOpenProgress: drawerOpenProgress,\n          navigation: _this.props.navigation,\n          descriptors: _this.props.descriptors,\n          contentComponent: _this.props.navigationConfig.contentComponent,\n          contentOptions: _this.props.navigationConfig.contentOptions,\n          drawerPosition: _this.props.navigationConfig.drawerPosition,\n          style: _this.props.navigationConfig.style\n        }, _this.props.navigationConfig))\n      });\n    };\n    _this._renderContent = function () {\n      var _this$props = _this.props,\n        lazy = _this$props.lazy,\n        navigation = _this$props.navigation;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return _jsx(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent()\n        });\n      } else {\n        return _jsx(ScreenContainer, {\n          style: styles.pages,\n          children: routes.map(function (route, index) {\n            if (lazy && !loaded.includes(index)) {\n              return null;\n            }\n            var isFocused = navigation.state.index === index;\n            var descriptor = _this.props.descriptors[route.key];\n            return _jsx(ResourceSavingScene, {\n              style: [StyleSheet.absoluteFill, {\n                opacity: isFocused ? 1 : 0\n              }],\n              isVisible: isFocused,\n              children: _jsx(SceneView, {\n                navigation: descriptor.navigation,\n                screenProps: _this.props.screenProps,\n                component: descriptor.getComponent()\n              })\n            }, route.key);\n          })\n        });\n      }\n    };\n    _this._setDrawerGestureRef = function (ref) {\n      _this.drawerGestureRef.current = ref;\n    };\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n      var _this$props$navigatio = this.props.navigation.state,\n        openId = _this$props$navigatio.openId,\n        closeId = _this$props$navigatio.closeId,\n        toggleId = _this$props$navigatio.toggleId,\n        isDrawerOpen = _this$props$navigatio.isDrawerOpen;\n      var _prevProps$navigation = prevProps.navigation.state,\n        prevOpenId = _prevProps$navigation.openId,\n        prevCloseId = _prevProps$navigation.closeId,\n        prevToggleId = _prevProps$navigation.toggleId;\n      var prevIds = [prevOpenId, prevCloseId, prevToggleId];\n      var changedIds = [openId, closeId, toggleId].filter(function (id) {\n        return !prevIds.includes(id);\n      }).sort(function (a, b) {\n        return a > b;\n      });\n      changedIds.forEach(function (id) {\n        if (id === openId) {\n          _this2._drawer.openDrawer();\n        } else if (id === closeId) {\n          _this2._drawer.closeDrawer();\n        } else if (id === toggleId) {\n          if (isDrawerOpen) {\n            _this2._drawer.closeDrawer();\n          } else {\n            _this2._drawer.openDrawer();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var navigation = this.props.navigation;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = this.props.descriptors[activeKey].options.drawerLockMode;\n      var _this$props$navigatio2 = this.props.navigationConfig,\n        overlayColor = _this$props$navigatio2.overlayColor,\n        drawerBackgroundColor = _this$props$navigatio2.drawerBackgroundColor;\n      if (drawerBackgroundColor) {\n        drawerBackgroundColor = typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n      } else {\n        drawerBackgroundColor = ThemeColors[this.context].bodyContent;\n      }\n      if (overlayColor) {\n        overlayColor = typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n      } else {\n        overlayColor = ThemeColors[this.context].bodyContent;\n      }\n      return _jsx(DrawerLayout, {\n        ref: function ref(c) {\n          _this3._drawer = c;\n        },\n        onGestureRef: this._setDrawerGestureRef,\n        drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n        drawerBackgroundColor: drawerBackgroundColor,\n        overlayColor: overlayColor,\n        keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        onDrawerStateChanged: this._handleDrawerStateChange,\n        useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n        drawerType: this.props.navigationConfig.drawerType,\n        edgeWidth: this.props.navigationConfig.edgeWidth,\n        hideStatusBar: this.props.navigationConfig.hideStatusBar,\n        statusBarAnimation: this.props.navigationConfig.statusBarAnimation,\n        minSwipeDistance: this.props.navigationConfig.minSwipeDistance,\n        drawerContainerStyle: this.props.navigationConfig.drawerContainerStyle,\n        contentContainerStyle: this.props.navigationConfig.contentContainerStyle,\n        children: _jsx(DrawerGestureContext.Provider, {\n          value: this.drawerGestureRef,\n          children: this._renderContent()\n        })\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n  return DrawerView;\n}(React.PureComponent);\nDrawerView.contextType = ThemeContext;\nDrawerView.defaultProps = {\n  lazy: true\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","Dimensions","StyleSheet","ThemeColors","ThemeContext","SceneView","DrawerLayout","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","jsx","_jsx","DrawerView","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","Provider","value","children","_objectSpread","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","_this$props","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","component","getComponent","styles","pages","map","route","includes","isFocused","absoluteFill","opacity","isVisible","_setDrawerGestureRef","ref","current","_createClass","componentDidMount","addEventListener","componentDidUpdate","prevProps","_this2","_this$props$navigatio","openId","closeId","toggleId","isDrawerOpen","_prevProps$navigation","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","componentWillUnmount","removeEventListener","render","_this3","drawerLockMode","options","_this$props$navigatio2","overlayColor","drawerBackgroundColor","context","bodyContent","c","onGestureRef","keyboardDismissMode","onDrawerOpen","onDrawerClose","onDrawerStateChanged","useNativeAnimations","renderNavigationView","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","drawerContainerStyle","contentContainerStyle","getDerivedStateFromProps","nextProps","prevState","_toConsumableArray","PureComponent","contextType","defaultProps","default","create","flex"],"sources":["/home/ninny/Documents/GitHub/ChecklistMine/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { ThemeColors, ThemeContext, SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static contextType = ThemeContext;\n\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n    let { overlayColor, drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      drawerBackgroundColor = typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n    } else {\n      drawerBackgroundColor = ThemeColors[this.context].bodyContent;\n    }\n\n    if (overlayColor) {\n      overlayColor = typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n    } else {\n      overlayColor = ThemeColors[this.context].bodyContent;\n    }\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={drawerBackgroundColor} overlayColor={overlayColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}